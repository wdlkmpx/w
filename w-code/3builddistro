#!/bin/bash

export LANG=C #faster.
export BUILDSYS=yes
export MWD=$(pwd)
export WKGDIR=$MWD

. ./_00func
. ./_00build.conf
[ -f ./_00build_2.conf ] && . ./_00build_2.conf
. ./DISTRO_SPECS     # this has DISTRO_VERSION.
source_compat_repos  # ./DISTRO_COMPAT_REPOS-
source_pkgs_specs    # ./DISTRO_PKGS_SPECS-
. ./DISTRO_PET_REPOS # want variable PACKAGELISTS_PET_ORDER
source_woofmergevars # ./W_MERGEVARS
create_local_repos_dirs
set_layer_type       # aufs or overlay
set_archdir_var      # ex: ARCHDIR=x86_64-linux-gnu

# -release cli param
for i in $@ ; do
	case $i in
		-release|release)
			BUILD_DEVX=yes
			BUILD_DOCX=yes
			BUILD_NLSX=yes
			;;
	esac
done

[ "${DISTRO_BINARY_COMPAT}" = 'slackware64' ] && lsuffix=64
export XTRA_FLG # build.conf - extra naming for iso
KERNEL_REPO_URL=${KERNEL_REPO_URL:-http://distro.ibiblio.org/puppylinux/huge_kernels} #can change var
#the files that have compatible-distro pkg docs (these were downloaded by 0setup)...
PKGLISTS_COMPAT="`echo "$PKG_DOCS_DISTRO_COMPAT" | tr ' ' '\n' | cut -f 3 -d '|' | tr '\n' ' ' | sed -e 's% $%%'`" #see file DISTRO_PKGS_SPECS-ubuntu
PKGS_SPECS_TABLE="`echo "$PKGS_SPECS_TABLE" | grep -v '^#'`" # remove comments

export DISTRO_NAME DISTRO_VERSION DISTRO_COMPAT_VERSION
export CORESFS="core_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
export ZDRVSFS="zdrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
export FDRVSFS="fdrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
export ADRVSFS="adrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
export YDRVSFS="ydrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
export DEVXSFS="devx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
export DOCXSFS="docx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
export NLSXSFS="nlsx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"

if [ "$BUILD_ZIP" = "yes" ]; then
	SDFLAG="zip"
elif [ "$DISTRO_TARGETARCH" = "arm" ]; then
	SDFLAG=1
fi

mkdir -p sandbox3
#now build rootfs-complete, the main filesystem...
echo
echo "Now building sandbox3/rootfs-complete, with the complete filesystem..."
echo '#!/bin/sh' > sandbox3/pinstall.sh
rm -rf sandbox3/rootfs-complete
rm -rf sandbox3/devx
rm -rf sandbox3/docx ${DOCXSFS}
rm -rf sandbox3/nlsx ${NLSXSFS}
sync
mkdir -p sandbox3/rootfs-complete/etc
mkdir -p sandbox3/devx
cp DISTRO_SPECS sandbox3/rootfs-complete/etc/

#copy the skeleton...
cp -a rootfs-skeleton/* sandbox3/rootfs-complete/
cat sandbox3/rootfs-complete/pinstall.sh >> sandbox3/pinstall.sh

### new {a,f,y}drv stuff - this creates a full 'woof-installed-packages' in {a,y}drv and subtracts the
# {a,y}drv installed packages from the the full 'woof-installed-packages' that goes to the main sfs.
if [ "$(echo $ADRV_INC)" != "" -o "$(echo $FDRV_INC)" != "" -o "$(echo $YDRV_INC)" != "" ];then 
	sync
	fields="${ADRV_INC}:${FDRV_INC}:${YDRV_INC}:)"
	IFS=':' read -a field <<< $fields
	fcnt=0
	for dtype in a f y; do
		[ -d sandbox3/${dtype}drv ] && rm -rf sandbox3/${dtype}drv
		[ "$dtype" = 'a' -a -z "$ADRV_INC" ] && continue
		[ "$dtype" = 'f' ] && continue #don't bother with fdrv
		[ "$dtype" = 'y' -a -z "$YDRV_INC" ] && break
		mkdir -p sandbox3/${dtype}drv${PACKAGES_DIR}/
		[ -f /tmp/${dtype}-woof-packages ] && rm /tmp/${dtype}-woof-packages
		while read -r line
		do 
			IFS='|' read -r a b c <<<$line
			if echo "${fields[${fcnt}]}" | grep -q "$b" ;then
				continue
			else
				echo "$line" >> /tmp/${dtype}-woof-packages
			fi
		done < woof-installed-packages
		cat woof-installed-packages > sandbox3/${dtype}drv${PACKAGES_DIR}/woof-installed-packages
		cat /tmp/${dtype}-woof-packages > woof-installed-packages
		fcnt=$(($fcnt + 1))
	done
fi
###
rm -f sandbox3/rootfs-complete/pinstall.sh

function copy_pkgs_to_build()
{
	. ./DISTRO_SPECS
	SFS_DIR=$2
	case $SFS_DIR in
		*drv) xPRE=${SFS_DIR:0:1};; #extract first char: a, y, z, f ...
		*)    xPRE=''            ;;
	esac
	#--
	while read ONEPKG
	do
	case $SFS_DIR in adrv|ydrv)
		if ls rootfs-packages | grep -q "${ONEPKG}" ;then
			echo -n " ${ONEPKG}"
			cp -a --remove-destination rootfs-packages/${ONEPKG}/* sandbox3/${SFS_DIR}/ 2> /tmp/3builddistro-cp-errlog
			continue
		fi
		;;
	esac
	if [ ! -d packages-${DISTRO_FILE_PREFIX}/${ONEPKG} ];then
		if [ ! -d packages-${DISTRO_FILE_PREFIX}/${ONEPKG}_DEV ];then #pkg may go entirely into devx.
			if [ ! -d packages-${DISTRO_FILE_PREFIX}/${ONEPKG}_DOC ];then #pkg may go entirely into docs.
				echo "WARNING, PKG DOES NOT EXIST: packages-${DISTRO_FILE_PREFIX}/${ONEPKG}"
				continue
			fi
		fi
	fi
	case "$ONEPKG" in
		busybox|busybox_static|busybox-static) continue ;; #busy box may conflict with core apps
		sfs_load|xkbconfigmanager) continue;; #force woofce apps
	esac
	echo -n " ${ONEPKG}"
	cp -a --remove-destination packages-${DISTRO_FILE_PREFIX}/${ONEPKG}/* sandbox3/${SFS_DIR}/ 2> /tmp/3builddistro-cp-errlog
	sync
	if [ -f sandbox3/${SFS_DIR}/pinstall.sh ];then
		#note, do not filter #! /bin/sh (with a space)...
		(
		echo -e "\n#== packages-${DISTRO_FILE_PREFIX}/${ONEPKG} ==\n"
		grep  -E -v '^\#\!\/bin\/sh' sandbox3/${SFS_DIR}/pinstall.sh
		) >> sandbox3/${xPRE}pinstall.sh
		rm -f sandbox3/${SFS_DIR}/pinstall.sh
	fi
	#get rid of .specs file...
	rm -f sandbox3/${SFS_DIR}/*.specs
	done <<< "$(echo "$1" | tr ' ' '\n')"
	#--
}
#=====================================================================

echo "Copying to sandbox3/rootfs-complete..."
EXTRAS_LIST="${ADRV_INC// /|} ${YDRV_INC// /|} ${AFDRV_INC// /|}"
if echo "$EXTRAS_LIST" | grep -qvE "[a-z]";then
	DUMMY="" 
else
	DUMMY=XXXX #unless they make a Qld beer proggy 'XXXX' will never match; besides need a trailing field
	EXTRAS_LIST="${EXTRAS_LIST// /|}${DUMMY}"
	EXTRAS_LIST="${EXTRAS_LIST//^|}" #strip leading "|"
	EXTRAS_LIST="${EXTRAS_LIST//||/|}" #replace double "||" with "|"
fi
if [ -n "${DUMMY}" ];then
	PKGLIST="`echo "$PKGS_SPECS_TABLE" | grep '^yes' | grep -vE "${EXTRAS_LIST}" | cut -f 2 -d '|' | tr '\n' ' '`" 
else
	PKGLIST="`echo "$PKGS_SPECS_TABLE" | grep '^yes' | cut -f 2 -d '|' | tr '\n' ' '`"
fi
PKGLIST="${PKGLIST}"
copy_pkgs_to_build "${PKGLIST}" rootfs-complete
echo

### new {a,f,y}drv build - this sorts the packages and builds the {a,f,y}drv filesystem
ADRV_INCLUDE='';FDRV_INCLUDE_='';YDRV_INCLUDE=''
[ "$(echo $ADRV_INC)" != "" ] && ADRV_INCLUDE=adrv
[ "$(echo $FDRV_INC)" != "" ] && FDRV_INCLUDE=fdrv
[ "$(echo $YDRV_INC)" != "" ] && YDRV_INCLUDE=ydrv
if [ -n "$ADRV_INCLUDE" -o -n "$FDRV_INCLUDE" -o -n "$YDRV_INCLUDE" ];then
	rm -f sandbox3/?pinstall.sh
	for _DRV in  $ADRV_INCLUDE $FDRV_INCLUDE $YDRV_INCLUDE;do
		echo
		echo "Now building sandbox3/${_DRV} with apps redirected to ${_DRV}_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
		case ${_DRV} in
		adrv)
			echo '#!/bin/sh' > sandbox3/apinstall.sh
			mkdir -p sandbox3/adrv/usr/local/bin
			copy_pkgs_to_build "${ADRV_INC}" adrv
			chmod 755 sandbox3/apinstall.sh
			echo;;
		fdrv)
			echo '#!/bin/sh' > sandbox3/fpinstall.sh
			mkdir -p sandbox3/fdrv/
			copy_pkgs_to_build "${FDRV_INC}" fdrv
			chmod 755 sandbox3/fpinstall.sh
			echo
			CONF_DIR=no;;
		ydrv)
			echo '#!/bin/sh' > sandbox3/ypinstall.sh
			mkdir -p sandbox3/ydrv/usr/local/bin
			copy_pkgs_to_build "${YDRV_INC}" ydrv
			chmod 755 sandbox3/ypinstall.sh
			echo;;
		esac
		# if exists in {a,y}drv a .desktop file we symlink it to root/.config/rox.sourceforge.net/OpenWith/
		if [ ! "$CONF_DIR" = 'no' ];then
			mkdir -p sandbox3/${_DRV}/root/.config/rox.sourceforge.net/OpenWith/
			(
			cd sandbox3/${_DRV}/root/.config/rox.sourceforge.net/OpenWith/
			for d in ../../../../usr/share/applications/*.desktop;do
				app=${d##*/}
				lo=$app # weird bug with libreoffice*.desktop 'permission denied'
				app=${app%\.*}
				if echo $app | grep -q 'libreoffice';then
					echo $app | grep -qE "qstart|startcenter|xsltfilter" && continue
					ln -sf $d $lo # maintains '.desktop' extension
				else
					ln -sf $d $app
				fi
			done
			)
		fi
	done
else
	rm -rf sandbox3/?drv #precaution
fi
### end {a,f,y}drv

#============================== extra packages
PKGSSPECS=DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}

rm -f /tmp/rootfs-packages.specs
if grep 'yes|xorg' $PKGSSPECS ; then #cli-only build
	for rpkg in $(ls rootfs-packages)
	do
		echo "copying $rpkg"
		cp -a rootfs-packages/${rpkg}/* sandbox3/rootfs-complete/
		if [ -f rootfs-packages/${rpkg}/pinstall.sh ];then
			if grep -qw 'exit' rootfs-packages/${rpkg}/pinstall.sh;then
				continue
			fi
			(	echo -e "\n#== ${rpkg}/pinstall.sh ==\n"
				cat rootfs-packages/${rpkg}/pinstall.sh
			) >> /tmp/rootfs_pkgs_pinstall.sh
		fi
		cat sandbox3/rootfs-complete/pet.specs >> /tmp/rootfs-packages.specs
	done
else
	echo -e "\nCLI-ONLY BUILD, NOT INCLUDING EXTRA PACKAGES ...\n"
fi

#creates devx-only-installed-packages.
./support/findwoofinstalledpkgs # moved to here so we can add /tmp/rootfs-packages.specs

#==============================


#some old packages have xpm and png images in /
mv -f sandbox3/rootfs-complete/{*.xpm,*.png} sandbox3/rootfs-complete/usr/share/pixmaps 2>/dev/null

# busybox applets...
if [ ! -f packages-${DISTRO_FILE_PREFIX}/busybox/bin/busybox.lst ] ; then
	echo "Please use the 'official' woofce busybox .pet package.."
	exit 1
fi
cp -a -f packages-${DISTRO_FILE_PREFIX}/busybox/bin/busybox* ./sandbox3/rootfs-complete/bin/
./support/busybox_symlinks.sh sandbox3/rootfs-complete
[ -f /tmp/rootfs_pkgs_pinstall.sh ] && cat /tmp/rootfs_pkgs_pinstall.sh >> sandbox3/pinstall.sh
# -

rm -f /tmp/3builddistro_end_of_pinstall
echo -e '\ntouch /tmp/3builddistro_end_of_pinstall' >> sandbox3/pinstall.sh
chmod 755 sandbox3/pinstall.sh

#pemasu start 131207
echo "Removing extra documentation"
for i in $(ls sandbox3/rootfs-complete/usr/share/doc); do
	case $i in legal|pmusic|pburn|pbackup|mtpaint|help|wvdial|ffconvert|cups|nls|puplogos|notecase|didiwiki|xarchive)
		continue
	esac
	if [ -d sandbox3/rootfs-complete/usr/share/doc/$i ] ; then
		rm -rf sandbox3/rootfs-complete/usr/share/doc/$i
	fi
done
for i in share/doc share/info share/man usr/share/info usr/share/man \
	usr/share/gtk-doc usr/share/gnome/help usr/info usr/man usr/share/cups/doc-root/help
do
	if [ -d sandbox3/rootfs-complete/${i} ] ; then
		rm -rf sandbox3/rootfs-complete/${i}
		mkdir -p sandbox3/rootfs-complete/${i}
	fi
done
echo "Removing extra locales"
for i in $(ls sandbox3/rootfs-complete/usr/share/locale); do
	case $i in en|en_US|locale.alias) continue ;; esac
	rm -rf sandbox3/rootfs-complete/usr/share/locale/$i
done
#pemasu end

#run post-install script...
echo
echo "Executing sandbox3/pinstall.sh post-install script..."
cd $WKGDIR/sandbox3/rootfs-complete
SAVEWKGDIR="$WKGDIR"
$WKGDIR/sandbox3/pinstall.sh
( ### new {a,f,y}drv stuff - execute the '{a,f,y}pinstall.sh'
	cd $WKGDIR/sandbox3/
	for post_inst in adrv fdrv ydrv;do
		[ -d "$post_inst" ] || continue
		echo "configuring $post_inst"
		prefix=${post_inst:0:1}
		[ -f ${prefix}pinstall.sh ] && { [ -d "$post_inst" ] && (cd ${post_inst};$WKGDIR/sandbox3/${prefix}pinstall.sh)}
		[ -f ${prefix}pinstall.sh ] && rm ${prefix}pinstall.sh
	done
)
if [ -f /tmp/3builddistro_end_of_pinstall ] ; then
	echo "pinstall.sh finished OK"
else
	echo -n "pinstall.sh aborted before completion. Press ENTER or CTRL-C: "
	read isitbad
fi
###
echo "Now setting /etc/os-release file"
cat > etc/os-release << _EOF
NAME=PLinux
VERSION="$DISTRO_VERSION"
ID=w_$DISTRO_FILE_PREFIX
VERSION_ID=$DISTRO_VERSION
PRETTY_NAME="$DISTRO_NAME $DISTRO_VERSION"
ANSI_COLOR="0;34"
CPE_NAME="cpe:/o:w:w_linux:$DISTRO_VERSION"
_EOF

WKGDIR="$SAVEWKGDIR"
cd $WKGDIR

#==========
cd sandbox3
#==========

sync
#now do the kernel...
echo
rm -rf build 2>/dev/null
mkdir build

if [ "$DISTRO_KERNEL_PET" = 'Raspbian_Kernel' ];then
	echo -n #-------
elif [ "$DISTRO_KERNEL_PET" = 'Kit_Kernel' ];then
	../support/kit_kernel.sh || exit 1
else
	# Huge_Kernel
	../support/huge_kernel.sh || exit 1
fi

#========================

rootfs=rootfs-complete

REALKERNAME='vmlinuz'
[ -f ${rootfs}/boot/vmlinuz* ] && mv ${rootfs}/boot/vmlinuz* build/vmlinuz
if [ -f ${rootfs}/boot/uImage ];then #mele a1000
	cp ${rootfs}/boot/uImage build/vmlinuz #120506 arm builds, using different name for kernel.
	REALKERNAME='uImage'
elif [ -f ${rootfs}/boot/kernel.img ];then #raspberry pi
	cp ${rootfs}/boot/kernel.img build/vmlinuz
	REALKERNAME='kernel.img'
elif [ -f ${rootfs}/boot/kernel7.img ];then #raspberry pi2
	cp ${rootfs}/boot/kernel7.img build/vmlinuz7
	REALKERNAME='kernel.img'
elif [ -f ${rootfs}/boot/vmlinuz-*-rpi ];then #raspberry pi, Raspbian kernel
	mv ${rootfs}/boot/vmlinuz-*-rpi build/vmlinuz
	REALKERNAME='kernel.img'
elif [ -f ${rootfs}/boot/vmlinuz-*-rpi2 ];then #raspberry pi2, Raspbian kernel
	mv ${rootfs}/boot/vmlinuz-*-rpi2 build/vmlinuz7
	REALKERNAME='kernel.img'
fi
[ -f ${rootfs}/boot/System.map ] && cp ${rootfs}/boot/System.map ./
sync

#build the initrd-tree...
echo -e "\nNow building initial ramdisk..."
cp ../DISTRO_SPECS rootfs-complete/etc/DISTRO_SPECS

if [ "$DISTRO_KERNEL_PET" = 'Kit_Kernel' ];then
	NEWVARIABLES="DISTRO_ZDRVSFS=\"kernel-modules-\$(uname -r)-${DISTRO_FILE_PREFIX}.sfs\""
else
	NEWVARIABLES="#default filenames...
#Note, the 'SFS' files below are what the 'init' script in initrd.gz searches for,
#for the partition, path and actual files loaded, see PUPSFS and ZDRV in /etc/rc.d/PUPSTATE
DISTRO_CORESFS='${CORESFS}'
DISTRO_ZDRVSFS='${ZDRVSFS}'
DISTRO_FDRVSFS='${FDRVSFS}'
DISTRO_ADRVSFS='${ADRVSFS}'
DISTRO_YDRVSFS='${YDRVSFS}'"
fi
echo "$NEWVARIABLES" >> rootfs-complete/etc/DISTRO_SPECS
DISTRO_WDATE="`date | tr -s " " | cut -f 2,6 -d " "`"
echo "DISTRO_WDATE='${DISTRO_WDATE}'" >> rootfs-complete/etc/DISTRO_SPECS
[ "${ARCHDIR}" ] && echo "DISTRO_ARCHDIR='${ARCHDIR}'" >> rootfs-complete/etc/DISTRO_SPECS

#### initrd-progs #### build/initrd.gz...
cp rootfs-complete/etc/DISTRO_SPECS ../initrd-progs/DISTRO_SPECS

rm -f build/initrd.[gx]z ../initrd-progs/initrd.[gx]z
(
	cd ../initrd-progs/
	./build.sh -prebuilt -auto -arch ${W_TARGETARCH:-default} ${INITRD_LANG} ${INITRD_KM}
)
mv -fv ../initrd-progs/initrd.[gx]z build/ || exit 1

case $W_TARGETARCH in x86*)
	cp -fv ../initrd-progs/0initrd/README.txt build/ ;;
esac

if [ "$SDFLAG" ] ; then
	cp -fv ../initrd-progs/ZZ_initrd-expanded/bin/busybox rootfs-complete/bin/busybox_static
	cp -fv ../initrd-progs/ZZ_initrd-expanded/bin/e2fsck rootfs-complete/sbin/e2fsck_static
fi

rm -rf zdrv ${ZDRVSFS} 2>/dev/null #note, current dir is in sandbox3.
rm -f rootfs-complete/etc/profile.d/*.csh* 2>/dev/null # slackware 13.1

#-----------------------------------------
../support/rootfs-hacks.sh rootfs-complete
#-----------------------------------------
#sanity check...
echo
if [ "$W_HOSTARCH" = "$W_TARGETARCH" ];then #111123
	chroot rootfs-complete echo 'testing chroot'
	if [ $? -ne 0 ];then
		echo "ERROR: could not 'chroot' into sandbox3/rootfs-complete"
		echo "This means that something is incomplete, perhaps a library"
		exit
	fi
fi

for ONELIST in $PKGLISTS_COMPAT $PACKAGELISTS_PET_ORDER ; do
	cp -fv ../$ONELIST rootfs-complete${PACKAGES_DIR}/
done
cp -f ../PKGS_MANAGEMENT rootfs-complete${PACKAGES_DIR}/
repocnt=1

for ONEREPO in `ls -1 rootfs-complete${PACKAGES_DIR}/Packages-puppy* | sort -r`
do
	[ $repocnt -gt 3 ] && break #limit of 3 PLinux repos.
	BASEREPO=${ONEREPO##*/} #basename $ONEREPO
	enabledrepos="${enabledrepos}${BASEREPO} "
	repocnt=$(($repocnt + 1))
done
#add compat-distro repos...
for ONEREPO in `ls -1 rootfs-complete${PACKAGES_DIR}/Packages-[^p]*`
do
	[ $repocnt -gt 6 ] && break #only allow 6 active repos in PPM.
	BASEREPO="`basename $ONEREPO`"
	enabledrepos="${enabledrepos}${BASEREPO} "
	repocnt=$(( $repocnt + 1 ))
done
echo "PKG_REPOS_ENABLED='${enabledrepos}'" >> rootfs-complete${PACKAGES_DIR}/PKGS_MANAGEMENT

cp -f ../0setup rootfs-complete/usr/local/petget/
touch ../invaliddepslist
cp -f ../invaliddepslist rootfs-complete/usr/local/petget/
cp -f ../${DPSFILE} rootfs-complete${PACKAGES_DIR}/DISTRO_PKGS_SPECS   # _00func
cp -f ../${DCRFILE} rootfs-complete${PACKAGES_DIR}/DISTRO_COMPAT_REPOS # _00func
cp -f ../DISTRO_PET_REPOS rootfs-complete${PACKAGES_DIR}/DISTRO_PET_REPOS
[ -f ../PKGS_HOMEPAGES ] || touch ../PKGS_HOMEPAGES
cp -f ../PKGS_HOMEPAGES rootfs-complete${PACKAGES_DIR}/
(
	cat ../_00build.conf
	if [ -f ../_00build_2.conf ] ; then
		echo -e "\n\n>>>> _00build_2.conf >>>>\n\n"
		cat ../_00build_2.conf
	fi
	echo -e "\n\n>>>> rootfs-packages.conf >>>>\n\n"
) > rootfs-complete${PACKAGES_DIR}/woof-build.conf
#findwoofinstalledpkgs creates 'woof-installed-packages'
sort --key=1 --field-separator="|" ../woof-installed-packages > rootfs-complete${PACKAGES_DIR}/woof-installed-packages
touch ../devx-only-installed-packages
cp ../devx-only-installed-packages rootfs-complete${PACKAGES_DIR}/

# certain utilities are not appropriate when booting on an arm board...
if [ "$SDFLAG" ];then
	for i in usr/sbin/grubconfig usr/sbin/remasterpup2 \
		usr/share/applications/Grub-bootloader-config.desktop \
		usr/share/applications/BootFlash-usb-installer.desktop \
		usr/share/applications/PLinux-universal-installer.desktop \
		usr/share/applications/Remaster-PLinux-live-CD.desktop
	do rm -f rootfs-complete/${i} ; done
	if [ "$SDFLAG" != "zip" ]; then
		rm -f rootfs-complete/usr/sbin/resizepfile.sh
	fi
fi

#shared library loading...
( # > rootfs-complete/etc/ld.so.conf
	echo "/lib${lsuffix}"
	echo "/usr/lib${lsuffix}"
	if [ "$ARCHDIR" = "x86_64-linux-gnu" ] ; then #W_TARGETARCH='x86_64'
		echo "/lib64"
		echo "/usr/lib64"
		echo -e "/lib64\n/usr/lib64" > rootfs-complete/etc/ld.so.conf.d/lib64.conf
	fi
	[ -d rootfs-complete/usr/local/lib${lsuffix} ] && echo "/usr/local/lib${lsuffix}"
	[ -d rootfs-complete/opt/qt4/lib${lsuffix} ] && echo "/opt/qt4/lib${lsuffix}"
	echo "/root/my-applications/lib"
) > rootfs-complete/etc/ld.so.conf

echo "Updating system config.."
mkdir -p rootfs-complete/var/cache/fontconfig
if [ "$W_HOSTARCH" = "$W_TARGETARCH" ];then
	chroot rootfs-complete /etc/rc.d/rc.update w
	# create a table for dialog/Xdialog: /usr/share/i18n/dialog_table
	# 'chooselocale' is called from /etc/rc.d/rc.country at first boot and
	# pre-creating this table speeds things up. 111123
	chroot rootfs-complete /usr/sbin/chooselocale composeonly
else
	#*** cross-build
	touch rootfs-complete/etc/gtk-2.0/gtk.immodules
	( cd rootfs-complete ; XDG_DATA_HOME=./usr/share update-mime-database ./usr/share/mime/ )
	( cd rootfs-complete ; fc-cache -s -v -y $(pwd) usr/share/fonts )
fi

#. ../support/choose_themes
#if [ "${GTKTHEME}" ] && [ -d rootfs-complete/usr/share/themes/${GTKTHEME} ] ; then
#	pathGTK3THEME="`find rootfs-complete/usr/share/themes/${GTKTHEME} -type d -name gtk-3.0`"
#	[ "$pathGTK3THEME" ] && ln -snf "$pathGTK3THEME" rootfs-complete/root/.config/gtk-3.0
#fi

#=================================================
. ../support/builtin_files.sh # /tmp/rootfs-packages.specs
#=================================================

#120224 move rootfs-complete/usr/share/doc/nls to 'devx'...
mkdir -p devx/usr/share/doc/nls
cp -a -f rootfs-complete/usr/share/doc/nls/* devx/usr/share/doc/nls/
rm -r -f rootfs-complete/usr/share/doc/nls

if [ -f ../W_MERGEVARS ] ; then
	cp -f ../W_MERGEVARS rootfs-complete/etc/rc.d/
fi

#120704 some constraints in a small system...
if [ "$SDFLAG" != "" ];then
	#this also reduces writes to flash card... um, relatime seems to be the default anyway... 120707 change to noatime...
	echo "BOOT_ATIME='noatime'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #rc.sysinit will remount / with 'relatime' (constrains updating access time). 120707 change to noatime.
	echo "BOOT_DIRTYWRITE='1500'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #defer writing to disk. refer: http://www.lesswatts.org/tips/disks.php
	echo "BOOT_SCHEDULER='deadline'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #my kernel defaults to 'cfq', change to 'deadline'. refer: http://tombuntu.com/index.php/2008/09/04/four-tweaks-for-using-linux-with-solid-state-drives/
	echo "BOOT_UDEVDCHILDREN='1'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #120709 is this a good idea? append --children-max=1 to udevd in rc.sysinit.
	echo "BOOT_BOARD='${BOOT_BOARD}'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #120714 read by quicksetup.
fi

if grep -q '^spot:' /etc/passwd ; then
	busybox chown -h -R spot:spot rootfs-complete/home/spot
fi
(
	cd rootfs-complete
	echo "$EXTRA_COMMANDS" | while read i ; do eval $i ; done
)

rm -rf rootfs-complete/tmp/* #121123 some above chroot operations may have left something behind in here.

## $DEFAULTAPPS - build.conf
echo "Setting default apps specified in build.conf ..."
echo "$DEFAULTAPPS" | sed -e '/^$/d' | \
while IFS="=" read -r field value
do
	[ "$field" = "" -o "$value" = "" ] && continue
	if [ "$value" = "rox" ] ; then
		value=roxfiler
	fi
	DRV_TGT=rootfs-complete NICE_TGT=main
	echo "$ADRV_INC" | grep -q "${value%% *}" && DRV_TGT=adrv NICE_TGT=adrive # determine if app is on main sfs or adrv (not allowed in ydrv,fdrv)
	echo "$field -> $value ($NICE_TGT sfs)"
	[ -e "$DRV_TGT/usr/local/bin/" ] || mkdir -p ${DRV_TGT}/usr/local/bin/ # may not exist on adrv
	echo "#!/bin/sh
exec $value \"\$@\"" > ${DRV_TGT}/usr/local/bin/$field
	chmod 755 ${DRV_TGT}/usr/local/bin/$field
done

if [ "$SDFLAG" != "" -a "$SDFLAG" != "zip" ]; then
	BUILD_SFS='no'
else
	BUILD_SFS='yes'
fi
echo

#-------------------------
#before building core.sfs from rootfs-complete, check for any invalid symlinks
#and move them to the devx...
echo
if [ "$W_HOSTARCH" = "$W_TARGETARCH" ] ; then
	echo "Finding invalid symlinks..."
	dirs=$(ls -d rootfs-complete/* | sed -e 's|^rootfs-complete||' | grep -vE '/dev/|/proc/|/sys/') #|/initrd/|/tmp/|/var/|/run/|/mnt/
	chroot rootfs-complete find $dirs -type l ! -exec test -e {} \; -print > /tmp/invalidsymlinks
	#/usr/local/lib/X11/pixmaps: these images created 1st boot... (was in the old code)
	cat /tmp/invalidsymlinks | sed '\|lib/X11/pixmaps|d' | \
	while read ONESYMLINK ; do
		UPONE=${ONESYMLINK%/*} #dirname ONESYMLINK
		mkdir -p devx${UPONE}
		cp -a -f "rootfs-complete${ONESYMLINK}" devx${UPONE}/
		rm -f "rootfs-complete$ONESYMLINK"
	done
fi

sync

if [ "$BUILD_SFS" = 'yes' ]; then
	sh $MWD/support/files2delete.sh rootfs-complete
	#build the rootfs-complete sfs...
	echo -e "\nNow building the main f.s., ${CORESFS}..."
	sync
	rm -f build/${CORESFS} 2>/dev/null
	mksquashfs rootfs-complete build/${CORESFS} ${SFSCOMP} #100911 110713
	sync
	###########
	if [ -d adrv -o -d fdrv -o -d ydrv ];then
		#build the {a,f,y}drive sfs...
		for SYS_SFS in adrv fdrv ydrv
		do
			[ ! -d "$SYS_SFS" ] && echo "no $SYS_SFS" && continue
			case $SYS_SFS in
				adrv) TYPE_SYS_SFS="${ADRVSFS}";;
				fdrv) TYPE_SYS_SFS="${FDRVSFS}";;
				ydrv) TYPE_SYS_SFS="${YDRVSFS}";;
			esac
			echo -e "\nNow building the $SYS_SFS f.s., $TYPE_SYS_SFS ..."
			sync
			rm -f build/${TYPE_SYS_SFS} 2>/dev/null
			mksquashfs $SYS_SFS build/${TYPE_SYS_SFS} ${SFSCOMP} #170330
			sync
		done
	fi
	#############
	# build.conf: ADRV_SFS_URL='..' YDRV_SFS_URL='..' FDRV_SFS_URL='..'
	for i in \
		"adrv|${ADRV_SFS_URL}|${ADRVSFS}" \
		"ydrv|${YDRV_SFS_URL}|${YDRVSFS}" \
		"fdrv|${FDRV_SFS_URL}|${FDRVSFS}"
	do
		IFS="|" read XDRV XDRV_URL XDRV_SFS <<< "$i"
		if [ -d "$XDRV" ] ; then
			continue # $XDRV is created using the PKGS_SPECS
		fi
		if ! [ "$XDRV_URL" ] ; then
			continue
		fi
		../support/download_file.sh "$XDRV_URL" ../../local-repositories/sfs build/${XDRV_SFS}
		[ $? -ne 0 ] && ../support/download_file.sh "$XDRV_URL" ../../local-repositories/sfs build/${XDRV_SFS}
	done
fi # if BUILD_SFS

#==================================================================================
# DEVX.SFS

#now do the devx...
case $BUILD_DEVX in #_00build.conf
	yes|no) echo -n ;;
	*) BUILD_DEVX=yes ;;
esac

if [ "$BUILD_DEVX" = "yes" ] ; then
	cd $WKGDIR
	echo
	echo "Building ${DEVXSFS}..."
	echo " building sandbox3/devx ..."
	echo "$PKGS_SPECS_TABLE" | grep '^yes' | cut -f 2 -d '|' | sed -e 's%$%_DEV%' > /tmp/ALLGENNAMESD
	##rm -f ./${W_OUTPUT}/${DEVXSFS} 2>/dev/null #100911
	rm -f ./sandbox3/${DEVXSFS} 2>/dev/null #100911
	for ONEDEV in `ls -1 packages-${DISTRO_FILE_PREFIX} | grep '_DEV$' | tr '\n' ' '`
	do
		if grep -q -m1 "^$ONEDEV" /tmp/ALLGENNAMESD ;then
			cp -a --remove-destination packages-${DISTRO_FILE_PREFIX}/${ONEDEV}/* sandbox3/devx/
			sync
		fi
	done
	rm -f /tmp/ALLGENNAMESD
	sync

	if [ "$W_HOSTARCH" = "$W_TARGETARCH" ] ; then
		#earlier above i moved all invalid symlinks into the devx module, yeah but i
		#think should delete them if they really point nowhere...
		echo " Deleting really invalid symlinks in devx..."
		mkdir layer_top
		if [ "$LAYER_TYPE" = 'overlay' ]; then
			mkdir overlay_workdir
			mount -t overlay overlay -olowerdir=sandbox3/rootfs-complete,upperdir=sandbox3/devx,workdir=overlay_workdir layer_top
		else
			mount -t aufs -o udba=reval,diropq=w,dirs=sandbox3/devx=rw:sandbox3/rootfs-complete=ro layerfs layer_top
		fi
		#--
		dirs=$(ls -d layer_top/* | sed 's|layer_top||' | grep -vE '/dev/|/proc/|/sys/') #|/initrd/|/tmp/|/var/|/run/|/mnt/
		chroot layer_top find -L $dirs -type l -delete
		sync
		umount layer_top  ;  rmdir layer_top
	fi

	./support/rootfs-hacks.sh sandbox3/devx # -- HACKS --

	#100622 remove overhead of this script running every bootup...
	mkdir -p sandbox3/devx/etc/profile.d
	rm -f sandbox3/devx/etc/profile.d/pkgconfig* 2>/dev/null
	PKG_CONFIG_PATH="`find sandbox3/devx/usr/lib sandbox3/devx/opt sandbox3/devx/usr/local/lib -type d -name pkgconfig | sed -e 's%sandbox3/devx%%' | tr '\n' ':'`"
	echo "export PKG_CONFIG_PATH='${PKG_CONFIG_PATH}'" > sandbox3/devx/etc/profile.d/pkgconfig

	#maybe stray /install dir from slackware pkgs...
	rm -rf sandbox3/devx/install sandbox3/devx/pet.specs 2>/dev/null
	sync

	# 151019 - delete duplicate symlinks
	echo "deleting duplicate symlinks"
	find sandbox3/devx -type l | \
	while read ONESYMLINK ; do
		# if the symlink exists in sandbox3/rootfs-complete we delete it
		ESYMLINK=${ONESYMLINK//devx/rootfs-complete}
		[ -h "$ESYMLINK" ] && echo -n "$ONESYMLINK " && rm -f "$ONESYMLINK"
	done
	sync
	# do same for duplicates in /etc
	echo -e "\ndeleting duplicate entries in /etc"
	find sandbox3/devx/etc -type f | \
	while read ONEDUPE ; do
		EDUPE=${ONEDUPE//devx/rootfs-complete}
		[ -f "$EDUPE" ] && echo -n "$ONEDUPE " && rm -f "$ONEDUPE"
	done
	sync

	echo -e "\ncleaning out whiteouts"
	clean_out_whiteouts $sandbox3/devx # _00func

	sh $MWD/support/files2delete.sh sandbox3/devx
	for i in usr/share/gtk-doc usr/share/doc/*-dev usr/share/doc/*-common ; do
		rm -rf sandbox3/devx/${i}
	done

	echo "Now creating ${DEVXSFS} ..."
	mksquashfs sandbox3/devx ./sandbox3/${DEVXSFS} ${SFSCOMP} #100911 110713
	sync
	chmod 644 ./sandbox3/${DEVXSFS}
	echo "...done"

	cd sandbox3
fi

#==================================================================================
# ISO file

if [ "$SDFLAG" = "" ] ; then #120506
	if [ "$BUILD_DEVX" = "yes" -a -f ${DEVXSFS} ] ; then
		if [ "$DEVX_IN_ISO" = "yes" ] ; then #_00build.conf
			XTRA_FLG="${XTRA_FLG}-devx"
			mv -f ${DEVXSFS} ./build/
		fi
	fi
	W_OUTPUT="woof-output-${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}${XTRA_FLG}"
	if ! [ -d ../$W_OUTPUT ] ; then
		mkdir -p ../$W_OUTPUT
	fi
	#--
	. ../support/docx_nlsx.sh
	#--
	if [ -f ${DEVXSFS} ] ; then
		mv -f ${DEVXSFS} ../${W_OUTPUT}/
		( cd ../${W_OUTPUT} ; md5sum ${DEVXSFS} > ${DEVXSFS}.md5.txt )
	fi
	if [ -f ${DOCXSFS} ] ; then
		mv -f ${DOCXSFS} ../${W_OUTPUT}/
		( cd ../${W_OUTPUT} ; md5sum ${DOCXSFS} > ${DOCXSFS}.md5.txt )
	fi
	if [ -f ${NLSXSFS} ] ; then
		mv -f ${NLSXSFS} ../${W_OUTPUT}/
		( cd ../${W_OUTPUT} ; md5sum ${NLSXSFS} > ${NLSXSFS}.md5.txt )
	fi
	echo "Running ../support/mk_iso.sh"
	../support/mk_iso.sh || exit 1
fi

#==================================================================================

function create_image() {
	FMT=$FMT TSIZE=$TSIZE SWAP=$SWAP ../support/mk_arm_img.sh ../${W_OUTPUT}/${ZIPNAME}
	[ $? -ne 0 ] && rm -rf tmp/ && echo "failed to create image" && exit 1
	# we're in sandbox3
	TGTIMG=''
	cd tmp # can't run in subshell
	SRCIMG=`find . -type f -name "${DISTRO_FILE_PREFIX}*.img"` 
	TGTIMG=${SRCIMG##*/}
	zip -9 ../../${W_OUTPUT}/${TGTIMG}.zip ${SRCIMG}
	cd - >/dev/null 2>&1
	( cd ../${W_OUTPUT} ; md5sum ${TGTIMG}.zip > ${TGTIMG}.zip.md5.txt )
}

if [ "$SDFLAG" = "zip" ];then
	W_OUTPUT="woof-output-${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}"
	mkdir -p ../$W_OUTPUT
	../support/arm_zip_file.sh
	if [ -f build/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.zip ];then
		if [ "$ADD_GIT_HASH_TO_FILENAME" = "yes" ]; then
			GIT_HASH="${BUILD_FROM_W#*;}"
			GIT_HASH="${GIT_HASH%%;*}"
			ZIPNAME="${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}-${GIT_HASH}.zip"
			mv -f build/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.zip ../${W_OUTPUT}/${ZIPNAME}
		else
			ZIPNAME="${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.zip"
			mv -f build/${ZIPNAME} ../${W_OUTPUT}/
		fi
		( cd ../${W_OUTPUT} ; md5sum ${ZIPNAME} > ${ZIPNAME}.md5.txt )
		if [ -f ${DEVXSFS} ]; then
			mv -f ${DEVXSFS} ../${W_OUTPUT}/
			( cd ../${W_OUTPUT} ; md5sum ${DEVXSFS} > ${DEVXSFS}.md5.txt )
		fi
	fi

	if [ "$MKIMGFLAG" -a -e "../support/mk_arm_img.sh" ];then
		if [ -z "$IMG_NUM" ] ; then
			create_image
		else
			for imgzip in 1 2
			do
				case $imgzip in
					1)SWAP=y;;
					2)SWAP=n;;
				esac
				create_image
				rm -rf tmp/
			done
		fi
	fi
	rm -rf tmp/ # we're still in sandbox3

elif [ "$SDFLAG" ]; then #120506 sd image

	# $SD_IMAGE in _00build.conf
	. ../support/arm_sd_image.sh

fi

beep ; beep ; beep
echo -e "\nScript finished."

###END###
