#!/bin/bash
#110817 find all packages to be used in a build, pet and compat.
#110821 must also work with working-dir set to /root/.packages
#110908 fix o/p file for pkgs which genericname not found.
#111128 checking fields 11,12,13 of db now much faster.
#111204 use md5sum for all checking whether to rerun this script.
#121102 file DISTRO_SPECS has new variable DISTRO_DB_SUBNAME. ex: for 14.0-based slacko, DISTRO_DB_SUBNAME=slacko14
#121102 pet_packages-${DISTRO_COMPAT_VERSION} (or pet_packages-${DISTRO_FILE_PREFIX}) is now pet_packages-${DISTRO_DB_SUBNAME.

#variable PKGS_SPECS_TABLE in file DISTRO_PKGS_SPECS-* to have optional values in 5th field:
#yes|915resolution||exe,dev,doc,nls|[pet[:<repo>]] or yes|915resolution||exe,dev,doc,nls|[compat[:<repo>]]
#exs: yes|915resolution||exe,dev,doc,nls|compat yes|915resolution|915resolution|exe,dev,doc,nls|compat:core
#...'compat' means pkg from compatible-distro, 'core' is a specific repo, 3rd or 4rd field in 'Packages-mageia-1-core'
#...3rd field is now optional for both pet/compat if 5th field present.
#previously, a pet pkg is implied by empty 3rd field (and empty 5th), however now can have an optional name qualifier...
#ex: yes|915resolution|915resolution-2011*|exe,dev,doc,nls|pet
#...optional glob wildcard(s) in 3rd field, multiple parameters allowed (comma delimiters), '-' exclusion-prefix also.
#   PET pkgs: no need to specify _DEV, _DOC, _NLS, they are implied by 4th field.
#if above is unclear, please read: 

export LANG=C #faster.

## DS_DATE and DPS_MODIFY_DATE are md5 checksums
## when these are different it means an update has to happen

if [ $1 ] ; then #process a specific pkg only (debug)
	XPKG=$1
	DEBUG=1
fi

CURDIR="`pwd`"
if [ "$CURDIR" = "/root/.packages" ];then #110821
	. /etc/DISTRO_SPECS #has DISTRO_BINARY_COMPAT, DISTRO_COMPAT_VERSION
	if [ ! "$DISTRO_DB_SUBNAME" ] ; then
		DISTRO_DB_SUBNAME="$DISTRO_COMPAT_VERSION" #121102 fallback if DISTRO_DB_SUBNAME not defined in file DISTRO_SPECS.
	fi
	DS_DATE="`md5sum /etc/DISTRO_SPECS | cut -f 1 -d ' '`"
	. ./DISTRO_PKGS_SPECS #has PKGS_SPECS_TABLE
	. ./DISTRO_COMPAT_REPOS #v431 has PKG_DOCS_DISTRO_COMPAT
	DPS_MODIFY_DATE="`md5sum ./DISTRO_PKGS_SPECS | cut -f 1 -d ' '`"
else
	. ./_00build.conf
	. ./_00func
	. ./DISTRO_SPECS #has DISTRO_BINARY_COMPAT, DISTRO_COMPAT_VERSION
	[ ! "$DISTRO_DB_SUBNAME" ] && DISTRO_DB_SUBNAME="$DISTRO_COMPAT_VERSION" #121102 fallback if DISTRO_DB_SUBNAME not defined in file DISTRO_SPECS.
	DS_DATE="`md5sum ./DISTRO_SPECS | cut -f 1 -d ' '`"
	source_compat_repos  # ./DISTRO_COMPAT_REPOS-
	if [ -f ./DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} ];then
		. ./DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}
		DPS_MODIFY_DATE="`md5sum ./DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} | cut -f 1 -d ' '`"
	else
		. ./DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}
		DPS_MODIFY_DATE="`md5sum ./DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT} | cut -f 1 -d ' '`"
	fi
fi

. ./DISTRO_PET_REPOS #has PET_REPOS, PACKAGELISTS_PET_ORDER
. ./PKGS_MANAGEMENT #has PKG_NAME_ALIASES
. ./W_MERGEVARS #111127 need to know if a cross-build.

#the files that have compatible-distro pkg docs (these were downloaded by 0setup)...
PKGLISTS_COMPAT="`echo "$PKG_DOCS_DISTRO_COMPAT" | tr ' ' '\n' | cut -f 3 -d '|' | tr '\n' ' '`" #see file DISTRO_PKGS_SPECS-ubuntu
#...format ex: 'Packages-ubuntu-intrepid-main Packages-ubuntu-intrepid-universe'

CURRDIR="`pwd`"
mkdir -p status
STATUSDIR="${CURRDIR}/status"

#for efficiency, only run this script if have too... 111204 use md5sum instead of date...
KEEPGOING='no'
for ADBFILE in $PACKAGELISTS_PET_ORDER $PKGLISTS_COMPAT
do
	NEWDATE="`md5sum $ADBFILE | cut -f 1 -d ' '`"
	OLDDATE="0"
	if [ -f ${STATUSDIR}/MODIFY_DATE_${ADBFILE} ] ; then
		OLDDATE="`cat ${STATUSDIR}/MODIFY_DATE_${ADBFILE}`"
	fi
	if [ "$NEWDATE" != "$OLDDATE" ];then
		KEEPGOING='yes'
	fi
	# cache the columns used during package search
	if [ "$KEEPGOING" = "yes" ] || [ ! -f $STATUSDIR/$ADBFILE-cols ];then
		cut -f 2,3 -d '|' ./${ADBFILE} > $STATUSDIR/$ADBFILE-cols
		sed -i 's%$%|%g' $STATUSDIR/$ADBFILE-cols # add extra '|' = printcols
	fi
done

OLD_DPS_DATE="0"
if [ -f ${STATUSDIR}/findpkgs_DPS_MODIFY_DATE-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} ] ; then
	OLD_DPS_DATE="`cat ${STATUSDIR}/findpkgs_DPS_MODIFY_DATE-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}`"
fi

if [ "$DPS_MODIFY_DATE" != "$OLD_DPS_DATE" ];then
	KEEPGOING='yes'
	echo -n "${DPS_MODIFY_DATE}" > ${STATUSDIR}/findpkgs_DPS_MODIFY_DATE-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}
fi

OLD_DS_DATE="0"
if [ -f ${STATUSDIR}/findpkgs_MODIFY_DATE_DISTRO_SPECS ] ; then
	OLD_DS_DATE="`cat ${STATUSDIR}/findpkgs_MODIFY_DATE_DISTRO_SPECS`"
fi

if [ "$DS_DATE" != "$OLD_DS_DATE" ];then
	KEEPGOING='yes'
	echo -n "$DS_DATE" > ${STATUSDIR}/findpkgs_MODIFY_DATE_DISTRO_SPECS
fi
if [ ! -f ${STATUSDIR}/findpkgs_FINAL_PKGS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} ] ; then
	KEEPGOING='yes'
fi
if [ "$KEEPGOING" != "yes" -a ! "$XPKG" ];then
	echo
	echo "Exiting from support/findpkgs, already created up-to-date pkg list:"
	echo " ${STATUSDIR}/findpkgs_FINAL_PKGS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}"
	echo
	exit 0
fi

rm -rf /tmp/findpkgs_tmp 2>/dev/null
mkdir /tmp/findpkgs_tmp

#remove comments from PKGS_SPECS_TABLE... make sure '|' on end... get rid of old |+udev,+whatever on end...
PKGS_SPECS_TABLE="`echo "$PKGS_SPECS_TABLE" | grep -v '^#' | grep -v '^$' | tr '\t' ' ' | tr -s ' ' | tr '+' '&' | sed -e 's%|&.*%%' | tr '&' '+' | sed -e 's% #.*%%' -e 's% $%%' -e 's%$%|%' -e 's%||$%|%'`"

#=====================================================================

echo
echo "Checking syntax of PKGS_SPECS_TABLE..."
CNT=1
for ONECHK in $PKGS_SPECS_TABLE
do
	BADFLAG='no'
	DELS="${ONECHK//[^|]}" # remove all chars but "|"
	NUMDELS="${#DELS}"     # count chars / delimiters
	[  $NUMDELS -lt 3 -o $NUMDELS -gt 5 ] && BADFLAG='yes'
	# delim         yes  |cairo |cairo|exe,dev,doc,nls|
	IFS="|" read -r YESNO GENPKG ETC <<< "$ONECHK"
	case $YESNO in
		yes|no) ok=1 ;;
		*) BADFLAG='yes' ;;
	esac
	[ "$GENPKG" = "" ]  && BADFLAG='yes'
	if [ "$BADFLAG" = "yes"  ];then
		echo "NUMDELS=$NUMDELS"
		echo "YESNO=$YESNO"
		echo "SYNTAX ERROR LINE ${CNT}: '$ONECHK'"
		echo "$PKGS_SPECS_TABLE" > /tmp/pst-dump
		exit 1
	fi
	CNT=$(($CNT + 1))
done

#=====================================================================

echo -n "" > /tmp/findpkgs_tmp/FINAL_PKGS

petcompiledPTNS="." #allow everything through.

for ADBFILE in $PACKAGELISTS_PET_ORDER $PKGLISTS_COMPAT
do
	NEWSUM="`md5sum $ADBFILE | cut -f 1 -d ' '`"
	OLDSUM="0"
	if [ -f ${STATUSDIR}/MODIFY_DATE_${ADBFILE} ] ; then
		OLDSUM="`cat ${STATUSDIR}/MODIFY_DATE_${ADBFILE}`"
	fi
	if [ "$NEWSUM" != "$OLDSUM" ];then
		echo -n "$NEWSUM" > ${STATUSDIR}/MODIFY_DATE_${ADBFILE}
	fi
done


if [ "$XPKG" ] ; then
	XRESULT=$(echo "$PKGS_SPECS_TABLE" | grep "|${XPKG}|")
	[ "$XRESULT" ] && PKGS_SPECS_TABLE="$XRESULT"
fi

#======================================================================
echo
echo "Finding packages to be used in the build..."
echo > FINDPKGS-NOT-FOUND.log

(
for ONEPKGSPEC in $PKGS_SPECS_TABLE
do
	if [ "$ONEPKGSPEC" = "" ] ; then
		continue
	fi
	# delim         yes  |cmake      |cmake,cxxlibs,libarchive,libidn|exe>dev,dev,doc,nls
	IFS="|" read -r YESNO GENERICNAME BINARYPARTNAMES FOUR PKGLOCFLD ETC <<< "$ONEPKGSPEC"
	if [ "$YESNO" != "yes" ] ; then
		continue
	fi
	BINARYPARTNAMES="${BINARYPARTNAMES//,/ }" #convert "," to " "
	xBINARYPARTNAMES=""
	if [ "$BINARYPARTNAMES" = "" ];then
		xBINARYPARTNAMES="$GENERICNAME"
	else
		for BPART in ${BINARYPARTNAMES} ; do
			xBINARYPARTNAMES+=" ${BPART}"
		done
	fi

	PKGLOC2=''
	PKGLOC1='pet'
	if [ "$BINARYPARTNAMES" != "" ] ; then
		PKGLOC1='compat'
	fi
	#PKGLOCFLD="`echo "$ONEPKGSPEC" | cut -f 5 -d '|'`"
	if [ "$PKGLOCFLD" ];then
		#ex:                pet:tahr
		IFS=":" read -r PKGLOC1 PKGLOC2 <<< "$PKGLOCFLD"
	fi
	if [ "$PKGLOC1" = "pet" ];then
		PACKAGELISTS_ORDER="$PACKAGELISTS_PET_ORDER"
		xPACKAGELISTS_ORDER="$PACKAGELISTS_PET_ORDER"
	else
		PACKAGELISTS_ORDER="$PKGLISTS_COMPAT"
		xPACKAGELISTS_ORDER="$PKGLISTS_COMPAT"
	fi

	if [ "$PKGLOC2" ];then
		xPACKAGELISTS_ORDER=""
		for XPACKAGE_LIST in $PACKAGELISTS_ORDER ; do
			#exs: tahr (3rd field in Packages-puppy-tahr-official)
			case $XPACKAGE_LIST in *"-${PKGLOC2}-"*)
				xPACKAGELISTS_ORDER+="$XPACKAGE_LIST " ;;
			esac
		done
		if [ ! "$xPACKAGELISTS_ORDER" ];then
			for XPACKAGE_LIST in $PACKAGELISTS_ORDER ; do
				 #exs: core, nonfree, contrib, official (4th field in Packages-puppy-wary5-official)
				case $XPACKAGE_LIST in *"-${PKGLOC2}")
					xPACKAGELISTS_ORDER+="$XPACKAGE_LIST " ;;
				esac
			done
		fi
	fi

	#-----

	echo -n "$GENERICNAME " 1>&2
  
	for APARTNAME in $xBINARYPARTNAMES
	do
		namePTN="${APARTNAME//-/\\-}"      #replace "-" with "\-"
		namePTN="${namePTN//\*/.*}"        #replace "*" with ".*"
		namePTN="${namePTN//+/\\+}"        #replace "+" with "\+"
		#some pkgs may be _DEV only
		namePTN="^${namePTN}\||^${namePTN}_DEV\|"  #^namePTN|^namePTN_DEV|
		#echo "$namePTN" 1>&2

		if [ "$DEBUG" ] ; then
			echo  1>&2
			echo "$namePTN"  1>&2
			echo "$xPACKAGELISTS_ORDER"  1>&2
		fi

		FNDSPECS=""
		CURRENT_DB_FILE=""

		for PKGLIST in $xPACKAGELISTS_ORDER #ex: Packages-puppy-drake-official Packages-puppy-common-official Packages-puppy-4-official
		do
			#2 3:  nameonly & version
			FNDSPECS="`grep -E "$namePTN" $STATUSDIR/$PKGLIST-cols`"
			if [ "$FNDSPECS" ];then
				CURRENT_DB_FILE=${PKGLIST}
				break #pkg(s) found.
			fi
		done

		if [ ! "$FNDSPECS" ] ; then
			echo  1>&2
			echo "WARNING: $APARTNAME pkg was not found!" | tee -a FINDPKGS-NOT-FOUND.log  1>&2
			continue
		fi

		while IFS="|" read F1 F2
		do
			versionPTN="|${F2}|"  #ex: |2.3.4|
			#ex: |abiword| |abiword_DEV| |abiword_DOC| |abiword_NLS|
			case ${F1} in
				*_DEV*) ALLPTN="\|${F1}\|" ;; #_DEV only
				*)      ALLPTN="\|${F1}\||\|${F1}_DEV\||\|${F1}_DOC\||\|${F1}_NLS\|" ;;
			esac
			#--
			ALLPTN="${ALLPTN//-/\\-}" #replace "-" with "\-"
			ALLPTN="${ALLPTN//+/\\+}" #replace "+" with "\+"
			#--
			grep -E "$ALLPTN" ${CURRENT_DB_FILE} | \
			while read FULLDBENTRY
			do
				case "$FULLDBENTRY" in
					*"$versionPTN"*) ok=1;;
					*) continue ;;
				esac
				#ex: :a52dec:|compat|Packages-puppy-wary5-official|a52dec-0.7.4-w5|a52dec|0.7.4-w5||BuildingBlock|68K||a52dec-0.7.4-w5.pet||A free ATSC A52 stream decoder|puppy|wary5||
				#log the complete db entry, prefixed with generic-name, pet/compat and repo db filename...
				echo ":${GENERICNAME}:|${PKGLOC1}|${CURRENT_DB_FILE}|${FULLDBENTRY}"
				#  >> /tmp/findpkgs_tmp/FINAL_PKGS
			done

			# avoid NAME + NAME_DEV, select only 1 spec
			# the grep above also includes _DEV
			break

		done <<< "$FNDSPECS"
	done
done
) > /tmp/findpkgs_tmp/FINAL_PKGS

sync

#=====================================================================

#...each line is full db entry for package, prefixed with :generic-name:, pet/compat and repo-db-file
# ex: :a52dec:|compat|Packages-puppy-wary5-official|a52dec-0.7.4-w5|a52dec|0.7.4-w5||BuildingBlock|68K||a52dec-0.7.4-w5.pet||A free ATSC A52 stream decoder|puppy|wary5||
# 'compat' means pkg obtained from compatible-distro, in case of Wary they are also PETs.
# :generic-name: usually coincides with actual name in package. multiple pkgs may be combined into one generic-name.

cp /tmp/findpkgs_tmp/FINAL_PKGS \
	${STATUSDIR}/findpkgs_FINAL_PKGS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}

echo
echo "Script finished. Result is in file"
echo " status/findpkgs_FINAL_PKGS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}
Each line is full db entry for pkg, prefixed with :generic-name:, pet/compat
 and db-file. ex:
 :a52dec:|compat|Packages-puppy-wary5-official|a52dec-0.7.4-w5|a52dec|0.7.4-w5||BuildingBlock|68K||a52dec-0.7.4-w5.pet||A free ATSC A52 stream decoder|puppy|wary5||
 'compat' means pkg from compat-distro, in case of Wary they are also PETs
 :generic-name: is 2nd field in PKGS_SPECS_TABLE, note in some cases multiple
 packages are combined into same genericname, or same pkg can be shared by
 multiple genericnames -- latter case, line will look like: :gcc_lib::gcc_dev:|"

### END ###
